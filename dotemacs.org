# -*- ispell-local-dictionary: "en_US" -*-
#+TITLE:My Emacs Literate Config
#+AUTHOR: L. Gualdi
#+LANGUAGE: en
#+PROPERTY: header-args :tangle "~/.emacs.d/init.el"  :exports code

* early-init.el
#+begin_src elisp :tangle "~/.emacs.d/early-init.el"  :exports code
  ;;; early-init.el --- Initialization file for Emacs -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;  Emacs early init Startup File --- initialization for Emacs
  ;;  Do not edit this file directly, use dotemacs.org instead and tangle code using 'C-c C-v t'.

  ;;; Code:

  (require 'package)
  (package-initialize)

  (add-to-list 'package-archives
    	     '("melpa" . "https://melpa.org/packages/"))

  ;; https://github.com/jamescherti/minimal-emacs.d
  (defvar minimal-emacs-gc-cons-threshold (* 16 1024 1024)
    "The value of `gc-cons-threshold' after Emacs startup.")

  ;;; Garbage collection
  ;; Garbage collection significantly affects startup times. This setting delays
  ;; garbage collection during startup but will be reset later.

  (setq gc-cons-threshold most-positive-fixnum)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (setq gc-cons-threshold minimal-emacs-gc-cons-threshold)))

  ;;; Performance

  ;; Prefer loading newer compiled files
  (setq load-prefer-newer t)

  ;; Font compacting can be very resource-intensive, especially when rendering
  ;; icon fonts on Windows. This will increase memory usage.
  (setq inhibit-compacting-font-caches t)

  (provide 'early-init)
  ;;; early-init.el ends here
#+end_src


* init.el
** Header
#+begin_src elisp
  ;;; init.el --- Initialization file for Emacs -*- lexical-binding: t; -*-
  ;;; Commentary:
  ;;  Emacs Startup File --- initialization for Emacs
  ;;  Do not edit this file directly, use dotemacs.org instead and tangle code using 'C-c C-v t'.

  ;;; Code:
#+end_src

** Customized settings
It's possible to configure Emacs settings via =M-x customize=. By default, the
customized settings are stored in the 'user-init-file'. Store customized
settings in =custom.el= instead of =init.el=.
#+begin_src elisp
  (setopt custom-file (expand-file-name "custom.el" user-emacs-directory))
  (if (file-exists-p custom-file)
      (load custom-file))
#+end_src

** User's personal settings

Load personal's settings such as name or current email from another file
#+begin_src elisp
  (let ((file-path (expand-file-name ".work/settings.el" user-emacs-directory)))
    (when (file-exists-p file-path)
      (load file-path)))

  (let ((file-path (expand-file-name ".home/settings.el" user-emacs-directory)))
    (when (file-exists-p file-path)
      (load file-path)))
#+end_src

Load my personal lisp module stored in "elisp" directory

#+begin_src elisp
  (add-to-list 'load-path
               (expand-file-name "elisp" user-emacs-directory))
  (load "lg-lisp")
#+end_src

** Default settings
#+begin_src elisp
  ;; Disable all backup files
  (setopt make-backup-files nil)

  ;; Use short answer by default
  (setopt use-short-answers t)

  ;; Set default enconding system to utf-8
  (set-language-environment 'utf-8)
  (set-default-coding-systems 'utf-8)

  ;; Delete the current selection
  (delete-selection-mode t)

  ;; Disable scroll bar, menu bar, etc.
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Hide menu bar except on macosx
  (unless (memq window-system '(mac ns))
    (menu-bar-mode -1))

  ;; Inihibit startup screen
  (setopt inhibit-startup-screen t)

  ;; Use single space to end sentence
  (setopt sentence-end-double-space nil)

  ;; Change auto-fill width
  (setq-default fill-column 80)

  ;; Use space instead of tab
  (setq-default indent-tabs-mode nil)

  ;; Change default tab width
  (setq-default tab-width 2)
  (setq-default js-indent-level 2)
  (setq-default css-indent-offset 2)


  ;; By default, Emacs "updates" its ui more often than it needs to
  (setq idle-update-delay 1.0)

  ;; Increase how much is read from processes in a single chunk
  (setq read-process-output-max (* 512 1024))  ; 512kb

  ;;; Auto revert
  ;; Auto-revert in Emacs is a feature that automatically updates the
  ;; contents of a buffer to reflect changes made to the underlying file
  ;; on disk.
  (setq revert-without-query (list ".")  ; Do not prompt
        auto-revert-stop-on-user-input nil
        auto-revert-verbose t)

  ;; Revert other buffers (e.g, Dired)
  (setq global-auto-revert-non-file-buffers t)

  ;; Activate smooth scrolling
  (pixel-scroll-precision-mode)

  ;; Tips found on reddit /r/emacs to speeds up org files opening on windows after first emacs startup
  ;; https://www.reddit.com/r/emacs/comments/c2qddk/comment/ermm3tc/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
  ;; The effect of the following line is to load org the first time you do nothing for a second.
  ;; The second argument nil means that this only happens once.

  (run-with-idle-timer 1 nil (lambda () (require 'org)))
#+end_src

When the help window appears on another frame, then give that frame input focus
too.
#+begin_src emacs-lisp
  (setopt help-window-select t)
#+end_src

Add a hook to delete all trailing white space before saving.

Note : ~#'~ syntax is a short-hand for using 'function'. 'function' is like 'quote' but
preferred for objects which are functions (see Emacs lisp manual).

#+begin_src elisp
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src

Enable mode to save list of recently opened files.
#+begin_src elisp
  (recentf-mode t)
#+end_src

Save cursor position between Emacs sessions.
#+begin_src elisp
  (save-place-mode t)
#+end_src

Save history
#+begin_src elisp
  ;; Persist history over Emacs restarts.
  (use-package savehist
    :custom
    (history-delete-duplicates t)

    :init
    (savehist-mode))
#+end_src


** Macosx related settings
*** Keyboard
I'm using a mac with a french keyboard layout. Some characters cannot be used
directly.

#+begin_src elisp
  (defvar mac-command-modifier)
  (defvar mac-option-modifier)
  (defvar mac-control-modifier)
  (defvar ns-function-modifier)

  (if (memq window-system '(mac ns))
      (progn
        ;; Remap <home> and <end> to beginning-of-line and end-of-line
        ;; instead of  beginning-of-buffer and end-of-buffer
        (keymap-global-set "<home>" 'beginning-of-line)
        (keymap-global-set "<end>" 'end-of-line)

        (setq mac-command-modifier 'meta)  ;; enable meta as command
        (setq mac-option-modifier 'none) ;; Disable option key to be able to input special characters like pipe or tilde on french keyboard
        (setq mac-control-modifier 'control) ;; Enable control
        (setq ns-function-modifier 'super)  ;; make Fn key do Super
        (setq default-input-method "MacOSX")))
#+end_src

*** Frame title bar follow Macosx theme
#+begin_src elisp
  (if (memq window-system '(mac ns))
      (progn
        (defvar ns-use-proxy-icon)
        (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
        (add-to-list 'default-frame-alist '(ns-appearance . dark))
        (setq ns-use-proxy-icon  nil)))
#+end_src

** Emacs Appearance
*** Themes
#+begin_src elisp
  (load-theme 'tango-plus t)
#+end_src

*** Fonts
Use the Iosevka font for code and prose.
Use function from [[https://jeffkreeftmeijer.com/emacs-configuration/][Jeff Kreeftmeijer]] init.el
#+begin_src elisp
  (defun jk/set-face-font (face family)
    (set-face-attribute
     face nil
     :family family :weight 'regular :width 'expanded :height 100))

  (jk/set-face-font 'default "Iosevka")
  (jk/set-face-font 'fixed-pitch "Iosevka")
  (jk/set-face-font 'variable-pitch "Iosevka Aile")


  ;; Use a hook to use variable pitch font in text-mode
  (add-hook 'text-mode-hook #'variable-pitch-mode)
#+end_src

** Packages settings
Package repository declaration and package initialization is done in =early-init.el=.

*** exec-path-from-shell
On Macosx, when Emacs instance is launched as a GUI app, it inherits a default
minimal set of environment variable. This package ensure environment variable
inside Emacs look the same as in the user's path.

#+begin_src elisp
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+end_src

*** Spellchecking
I spent a lot of time trying to setup spellchecking within Emacs. I don't know
if this is the right way to do it, but with trials and errors, i was able to find a
workable enough setup for my needs.

On Macosx, I'm using Aspell because it was the easiest one to setup.
Aspell can be install via [[https://brew.sh/][homebrew]].

#+begin_src sh :tangle no
  $ brew install aspell
#+end_src

On windows, I'm using Hunspell. Hunspell can be install with [[https://chocolatey.org/][chocolatey]] package manager.

#+begin_src sh :tangle no
  choco install hunspell
#+end_src

In order to make Hunspell work on windows, create a directory =C:/hunspell=.
Then copy all *.aff and *.dic files that you need in this directory. I copied
mine from the [[https://github.com/LibreOffice/dictionaries][LibreOffice dictionaries]] repo on GitHub.

Then you must initialize =ispell-hunspell-dict-paths-alist= with all the
dictionary that you want to use.

At runtime, Emacs setup automatically the variable ~ispell-program-name~ to correct path
depending of your current spellchecker.

To switch between dictionary, you just have to use ~M-x
ispell-change-dictionary~ and select one of the dictionary initialized in =ispell-hunspell-dict-paths-alist=.

I also setup a personal dictionary using =ispell-personal-dictionary=. it must
be an absolute file name and the file must already exist for Hunspell to be able
to use it.

It's also possible to setup ispell dictionary on a per file basis if you specify
=ispell-local-dictionary= value in the first line of the file (see [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html][Specifying File Variable]]).

#+begin_example
-*- ispell-local-dictionary: "en_US" -*-
#+end_example



#+begin_src elisp
  (use-package ispell
    :defer t
    :config

    ;; Set the default dictionary to french
    (setenv "DICTIONARY" "fr")
    (setopt ispell-dictionary "fr")
    (setopt ispell-current-dictionary "fr")

    ;; Setup all dictionary path to use only on windows
    (when (memq window-system '(w32))
      (setopt
       ispell-hunspell-dict-paths-alist
       '(("fr" "C:/Hunspell/fr.aff")
         ("en_GB" "C:/Hunspell/en_GB.aff")
         ("en_US" "C:/Hunspell/en_US.aff")
         )))

    ;; Create a personal dictionary if it doesn't exist.
    (let ((filename (expand-file-name "perso.dic" user-emacs-directory)))
      (unless (file-exists-p filename)
        (with-temp-buffer
          (write-file filename))))

    ;; Ignore file sections for spell checking.
    (add-to-list 'ispell-skip-region-alist '("#\\+begin_example" . "#\\+end_example"))
    (add-to-list 'ispell-skip-region-alist '("#\\+begin_src" . "#\\+end_src"))
    (add-to-list 'ispell-skip-region-alist '("\\$" . "\\$"))
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '(":\\(PROPERTIES\\|LOGBOOK\\):" . ":END:"))

    :custom
    ;; There is a bug in corfu  [[https://github.com/minad/corfu/discussions/457][#457]]
    ;; Error running timer ‘corfu--auto-complete-deferred’: (error "ispell-lookup-words: No plain word-list found at systemdefault locations.  Customize ‘ispell-alternate-dictionary’ to set yours.")
    ;; a workaround is to set this variable to nil
    (text-mode-ispell-word-completion nil)

    ;; Setup the personal dictionary path
    (ispell-personal-dictionary
     (expand-file-name "perso.dic" user-emacs-directory)))
#+end_src

**** Flyspell
Enable Flyspell in text-mode derived buffer.

#+begin_src elisp
  (use-package flyspell
    :defer t
    :bind
    (:map flyspell-mouse-map
          ("<down-mouse-3>" . flyspell-correct-word)
          ("<mouse-3>" . undefined))
    :hook
    (text-mode . flyspell-mode))
#+end_src

**** Flycheck-grammalect
This enable =flycheck-grammalect= for french grammar and typography check.
The current version in melpa needs pkg-info.

#+begin_src elisp
  (use-package pkg-info
    :ensure t)
#+end_src

To use this package, you need to download the [[https://grammalecte.net/#download][Grammalect CLI & Server upstream]]
package. Just enter the following command: ~M-x grammalecte-download-grammalecte~.
Grammalect command line and server needs =Python 3.5+= our =Python 3.7+= to run.

#+begin_src elisp
  (use-package flycheck-grammalecte
    :ensure t
    :demand t ; force package to load immediately

    :hook
    (text-mode . flycheck-mode)

    :init
    (setq flycheck-grammalecte-report-apos nil
          flycheck-grammalecte-report-typo nil
          flycheck-grammalecte-report-esp nil
          flycheck-grammalecte-report-nbsp nil)

    ;; enable grammalect only in french org-mode buffers
    (setq flycheck-grammalecte-predicate
          (lambda ()
            (or (and (derived-mode-p 'org-mode)
                     (equal "fr"
                            (or (cadar (org-collect-keywords '("LANGUAGE")))
                                (bound-and-true-p
                                  org-export-default-language))))
                (and (boundp 'ispell-local-dictionary)
                     (member ispell-local-dictionary
                             '("fr" "francais7" "francais-tex"))))))

    :config
    ;; (grammalecte-download-grammalecte)   ;
    (flycheck-grammalecte-setup))
#+end_src

*** Plantuml
#+begin_src elisp :tangle no
  (use-package plantuml-mode
    :ensure nil
    :defer t
    :config
    (setq plantuml-output-type "png")
    :custom

    (plantuml-default-exec-mode 'jar)
    (plantuml-options "-charset UTF-8")
    (org-plantuml-jar-path "C:/Program Files/PlantUML/plantuml.jar")
    (plantuml-jar-path "C:/Program Files/PlantUML/plantuml.jar"))
#+end_src

*** SSH
#+begin_src emacs-lisp
  (use-package ssh-agency
    :ensure t)

  (setenv "SSH_ASKPASS" "git-gui--askpass")
#+end_src

*** Magit
#+begin_src elisp
  (use-package magit
    :ensure t
    :defer t
    :bind ("C-x g" . magit-status))
#+end_src

*** Spacious padding
#+begin_src elisp
  (use-package spacious-padding
    :ensure t
    :init
    (spacious-padding-mode))
#+end_src

*** Vertico
#+begin_src elisp
  (use-package vertico
    :ensure t
    :init
    (vertico-mode))
#+end_src

*** Corfu
#+begin_src elisp
  (use-package corfu
    :ensure t
    ;; Optional customizations
    :custom
    (corfu-auto t) ;; Enable corfu autocompletion
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

    ;; Enable Corfu only for certain modes. See also `global-corfu-modes'.
    ;; :hook ((prog-mode . corfu-mode)
    ;; 	  (shell-mode . corfu-mode)
    ;; 	  (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode)
    :config
    (keymap-unset corfu-map "RET"))
#+end_src

*** Cape
Completion at point extensions to be used in combination with =corfu=.
#+begin_src elisp
  (use-package cape
    :ensure t
    ;; Bind prefix keymap providing all Cape commands under a mnemonic key.
    ;; Press C-c p ? to for help.
    :bind ("C-c p" . cape-prefix-map) ;; Alternative key: M-<tab>, M-p, M-+
    ;; Alternatively bind Cape commands individually.
    ;; :bind (("C-c p d" . cape-dabbrev)
    ;;        ("C-c p h" . cape-history)
    ;;        ("C-c p f" . cape-file)
    ;;        ...)
    :init
    ;; Add to the global default value of `completion-at-point-functions' which is
    ;; used by `completion-at-point'.  The order of the functions matters, the
    ;; first function returning a result wins.  Note that the list of buffer-local
    ;; completion functions takes precedence over the global list.
    (add-hook 'completion-at-point-functions #'cape-dabbrev) ; Complete word from current buffer
    (add-hook 'completion-at-point-functions #'cape-file) ; Complete file name
    (add-hook 'completion-at-point-functions #'cape-elisp-block) ; Complete elisp in org-mode code block
    ;; (add-hook 'completion-at-point-functions #'cape-history)
    )
#+end_src

*** Orderless
#+begin_src elisp
  ;; Use the `orderless' completion style.
  (use-package orderless
    :ensure t
    :custom
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch))
    ;; (orderless-component-separator #'orderless-escapable-split-on-space)
    (completion-styles '(orderless basic))
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Marginalia
#+begin_src elisp
  (use-package marginalia
    :ensure t
    :init
    (marginalia-mode))
#+end_src

*** Dired
#+begin_src elisp
  (use-package dired
    :ensure nil
    ;; :hook
    ;; (dired-mode . dired-hide-details-mode)
    :custom
    (dired-dwim-target t))
#+end_src

*** Powershell
Install package to edit powershell script with Emacs and execute powershell command from
org-mode source block.
#+begin_src elisp
  (use-package powershell
    :ensure t)

  (use-package ob-powershell
    :ensure t)
#+end_src

*** Org-mode
#+begin_src elisp
  (use-package org
    :ensure nil
    :bind ((("C-c l" . org-store-link)
            ("C-c a" . org-agenda)
            ("C-c d" . org-time-stamp-inactive) ;; Remap de C-c ! car masqué par flycheck
            ("C-c c" . org-capture)
            ("C-c b" . org-switchb)))

    :config
    ;; Initialize org-block and org-table to fixed-pitch
    (set-face-attribute 'org-block nil :foreground 'unspecified :inherit 'fixed-pitch)
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)

    (setq org-capture-templates
          (quote (
                  ("t" "Todo" entry (file+headline "Todo.org" "Tâches")
                   "* TODO %?%^{CATEGORY}p\n%U\n" :empty-lines 1 :jump-to-captured t)
                  ("a" "Appeler un client" entry (file+headline "Todo.org" "Tâches")
                   "* Appeler %^{Nom client}\nSCHEDULED:%^t\n%?" :empty-lines 1 :jump-to-captured t))))

    (setq org-M-RET-may-split-line '((default . nil))) ; Doing M-RET when cursor is in middle of heading will not split line at current POS

    (setq org-todo-keywords
          '((sequence "TODO(t)" "IN-PROGRESS(i)" "WAITING(w)" "MAYBE(m)"  "|" "DONE(d)" "CANCEL(c)")))


    ;; Initialisation de org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (powershell . t)
       (org . t)
       ;; (restclient . t)
       ;;(plantuml . t)
       ))


    :custom
    ;; Setup custom variable for org-mode
    (org-insert-heading-respect-content t)

    (org-directory "~/Documents/Org")
    (org-archive-location "./Archives/%s_archive::")
    (org-agenda-files
     '("~/Documents/Org/Todo.org"))

    (org-log-done t)                      ; Log when a task is done
    (org-startup-indented t)              ; Indent text according to outline structure
    (org-startup-with-inline-images t)    ; Display inline image by default
    (org-src-tab-acts-natively t)
    (org-image-actual-width '(600)))      ; Image default size
#+end_src

**** Org-duration
Change default duration for clock :
- 1h = 60 min
- Work average 8h/day
- 5 days per week
- 4 weeks/month
- 10 month/year

#+begin_src elisp
  (use-package org-duration
    :ensure nil
    :config
    (customize-set-variable
     'org-duration-units
     `(("min" . 1)
       ("h" . 60)
       ("d" . ,(* 60 8))
       ("w" . ,(* 60 8 5))
       ("m" . ,(* 60 8 5 4))
       ("y" . ,(* 60 8 5 4 10)))))
#+end_src

*** Org-roam
I do not used org-roam yet.
#+begin_src elisp :tangle no
  (use-package org-roam
    :after (org)
    :ensure t
    :custom
    (org-roam-database-connector 'sqlite-builtin)

    (org-roam-directory "~/Documents/Org/roam-notes")
    :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert))
    :config
    (org-roam-db-autosync-enable))
#+end_src

*** Org-superagenda
#+begin_src elisp
  (use-package org-super-agenda
    :after (org)
    :ensure t
    :config
    (org-super-agenda-mode)
    (setq org-super-agenda-groups '(
                                    (:name "Prestation" :order 2 :and (:todo "TODO" :tag "prestation"))
                                    (:name "Technique" :order 5 :and (:todo ("TODO" "WAITING" "MAYBE") :tag ("tech" "dev")))
                                    (:name "A Faire" :todo "TODO" :order 1 )
                                    (:name "En Attente" :todo "WAITING" :order 4 )
                                    (:name "Un jour peut-être" :todo "MAYBE" :order 500 ))))
#+end_src

*** Terminal and shell
Use =eat= terminal emulator when running macosx.
#+begin_src elisp
  (use-package eat
    :if (memq window-system '(mac ns))
    :ensure t
    :hook
    (eshell-load . eat-eshell-mode)
    ;; (eshell-load . eat-eshell-visual-command-mode)
    )
#+end_src

** EOF
#+begin_src elisp
  (provide 'init)
  ;;; init.el ends here
#+end_src
